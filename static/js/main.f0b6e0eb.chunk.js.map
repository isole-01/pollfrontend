{"version":3,"sources":["HomePage/homePage.jsx","AddPollPage/AddPollPage.jsx","FillPage/FillPage.jsx","PollPage/PollPage.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","margin","backgroundColor","palette","background","paper","POLLS","gql","POLL_SUBSCRIPTION","HomePage","useQuery","loading","error","data","useState","newPolls","setNewPolls","classes","useSubscription","onSubscriptionData","pollAdded","subscriptionData","console","log","n","concat","Grid","List","component","className","aria-label","polls","map","poll","Fragment","ListItem","Link","to","id","button","ListItemText","primary","name","Divider","questions","menuButton","marginRight","spacing","title","ADD_POLL","h","useHistory","text","choice_a","choice_b","choice_c","choice_d","setQuestions","useMutation","addPoll","setName","handleChangeChoices","e","inf","target","split","index","parseInt","choice","newQuestions","value","onSubmit","preventDefault","variables","then","res","push","style","height","container","direction","justify","TextField","label","onChange","event","Button","color","marginLeft","round","Typography","question","item","key","Card","CardContent","placeholder","marginBottom","handleChange","CardActions","sm","onClick","i","splice","handleDelete","type","marginTop","POLL","FILL_POLL","FillPage","useParams","choices","setChoices","vals","Object","values","length","catch","alert","onOptionSelect","selectedOptions","questionNumber","POLL_UPDATE","PollPage","nums","setNums","onCompleted","data1","alignContent","ylabel","top","right","bottom","left","number_a","number_b","number_c","number_d","jss","create","plugins","jssPreset","rtl","flexGrow","justifyContent","App","dir","StylesProvider","AppBar","position","Toolbar","IconButton","edge","variant","exact","path","render","AddPollPage","Boolean","window","location","hostname","match","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f0b6e0eb.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useQuery, useSubscription} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 700,\r\n        margin: \"50px auto\",\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nconst POLLS = gql`\r\n    {\r\n\r\n        polls{\r\n            name\r\n            id\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nconst POLL_SUBSCRIPTION = gql`\r\n    subscription {\r\n        pollAdded {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function HomePage() {\r\n    const {loading, error, data} = useQuery(POLLS);\r\n    const [newPolls, setNewPolls] = useState([]);\r\n\r\n    const data2 = useSubscription(\r\n        POLL_SUBSCRIPTION,\r\n        {\r\n            onSubscriptionData: ({subscriptionData: {data: {pollAdded}}}) => {\r\n                console.log(pollAdded);\r\n                const n = [...newPolls].concat(pollAdded)\r\n                setNewPolls(n);\r\n            }\r\n        }\r\n    );\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return (\r\n        <Grid>\r\n            <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\r\n\r\n                {\r\n                    data.polls.map((poll) => <React.Fragment><ListItem component={Link}\r\n                                                                       to={`/show/${poll.id}`}\r\n                                                                       button>\r\n                        <ListItemText primary={poll.name}/>\r\n                    </ListItem>\r\n                        <Divider/>\r\n                    </React.Fragment>)\r\n                }\r\n                {\r\n                    newPolls.map((poll) => <React.Fragment><ListItem\r\n                        component={Link}\r\n                        to={`/show/${poll.id}`}\r\n                        button>\r\n                        <ListItemText  primary={poll.name}/>\r\n                    </ListItem>\r\n                        <Divider/>\r\n                    </React.Fragment>)\r\n                }\r\n\r\n                {/*<Divider light />*/}\r\n            </List>\r\n\r\n        </Grid>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {Card, Grid, Button, Typography} from \"@material-ui/core\";\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"90vw\",\r\n        margin: \"0 auto\",\r\n\r\n    },\r\n    questions: {\r\n        width: \"80%\",\r\n        margin: \"0 auto\",\r\n\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        // flexGrow: 1,\r\n        width: \"10vw\"\r\n    },\r\n}));\r\n\r\nconst ADD_POLL = gql`\r\n    mutation addPoll($name: String!,$questions:[QuestionIn!]!) {\r\n        addPoll(name: $name,questions:$questions) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport default function HomePage() {\r\n    const h = useHistory();\r\n    const classes = useStyles();\r\n    const [questions, setQuestions] = useState([{\r\n        text: \"\",\r\n        choice_a: \"\",\r\n        choice_b: \"\",\r\n        choice_c: \"\",\r\n        choice_d: \"\",\r\n    }]);\r\n    const [addPoll, dat] = useMutation(ADD_POLL);\r\n\r\n\r\n    const [name, setName] = useState([\"\"]);\r\n    const handleName = event => {\r\n        setName(event.target.value);\r\n    };\r\n\r\n\r\n    const addQuestion = (e) => {\r\n        setQuestions(questions.concat({\r\n            text: \"\",\r\n            choice_a: \"\",\r\n            choice_b: \"\",\r\n            choice_c: \"\",\r\n            choice_d: \"\",\r\n        }));\r\n        console.log(questions);\r\n    };\r\n    const handleChange = (e) => {\r\n        const index = parseInt(e.target.name);\r\n        let newQuestions = [...questions];\r\n\r\n        newQuestions[index].text = e.target.value;\r\n        setQuestions(newQuestions);\r\n    };\r\n    const handleChangeChoices = (e) => {\r\n        const inf = e.target.name.split('-');\r\n        const index = parseInt(inf[0]);\r\n        const choice = inf[1];\r\n        let newQuestions = [...questions];\r\n        newQuestions[index][choice] = e.target.value;\r\n        setQuestions(newQuestions);\r\n        console.log(questions);\r\n    };\r\n    const handleDelete = (i) => {\r\n        questions.splice(i, 1);\r\n        let newQuestions = [...questions];\r\n        setQuestions(newQuestions);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addPoll({\r\n            variables: {\r\n                name,\r\n                questions,\r\n            }\r\n        }).then((res) => h.push('/home'))\r\n    };\r\n\r\n    return (\r\n        <form className={classes.root} onSubmit={handleSubmit}>\r\n            <Grid style={{height:\"30px\",margin:\"20px\"}} container direction={\"row\"} justify={\"space-between\"}>\r\n                <TextField  label={\"نام نظرسنجی\"} value={name} onChange={handleName}/>\r\n\r\n                <Button color=\"primary\" style={{backgroundColor:\"#0091EA\",color:\"white\",marginLeft:\"5%\"}}\r\n                    round color={\"info\"} onClick={(e) => addQuestion(e)}>\r\n                    <Typography>افزودن سوال</Typography>\r\n                </Button>\r\n            </Grid>\r\n            <Grid spacing={6} className={classes.questions} container direction={\"column\"}>\r\n                {\r\n                    questions.map((question, index) =>\r\n                        <Grid item className={classes.question} container direction={\"column\"} key={question.id}>\r\n                            <Card>\r\n                                <CardContent>\r\n\r\n                                    <TextField\r\n                                        placeholder=\"عنوان سوال\"\r\n                                        style={{width: \"100%\", marginBottom: \"20px\"}}\r\n                                        onChange={(e) => handleChange(e)}\r\n                                        name={`${index}`} value={`${question.text}`}\r\n                                    />\r\n\r\n\r\n                                    <TextField\r\n                                        placeholder=\"گزینه ۱\"\r\n                                        style={{width: \"67%\",  marginBottom: \"10px\"}}\r\n                                        onChange={(e) => handleChangeChoices(e)}\r\n                                        name={`${index}-choice_a`} value={`${question.choice_a}`}\r\n                                    /><TextField\r\n                                    placeholder=\"گزینه ۲\"\r\n\r\n                                    style={{width: \"67%\",  marginBottom: \"10px\"}}\r\n                                    onChange={(e) => handleChangeChoices(e)}\r\n                                    name={`${index}-choice_b`} value={`${question.choice_b}`}\r\n                                /><TextField\r\n                                    placeholder=\"گزینه ۳\"\r\n\r\n                                    style={{width: \"67%\",  marginBottom: \"10px\"}}\r\n                                    onChange={(e) => handleChangeChoices(e)}\r\n                                    name={`${index}-choice_c`} value={`${question.choice_c}`}\r\n                                /><TextField\r\n                                    placeholder=\"گزینه ۴\"\r\n\r\n                                    style={{width: \"67%\",  marginBottom: \"10px\"}}\r\n                                    onChange={(e) => handleChangeChoices(e)}\r\n                                    name={`${index}-choice_d`} value={`${question.choice_d}`}\r\n                                />\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button color={'secondary'} name={`${index}`} round sm\r\n                                            style={{}}\r\n                                            onClick={() => handleDelete(index)}\r\n                                    >حذف سوال</Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    )\r\n                }\r\n                <Button type={\"submit\"} style={{color:\"white\",\r\n                    backgroundColor:\"#0091EA\",\r\n                    marginTop: \"40px\",\r\n                    width:\"30%\",\r\n                    margin: \"0 auto\",\r\n\r\n                }}\r\n\r\n                >تایید</Button>\r\n            </Grid>\r\n        </form>\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Test, QuestionGroup, Question, Option} from 'react-multiple-choice';\r\nimport {gql} from \"apollo-boost\";\r\nimport {useMutation, useQuery} from \"@apollo/react-hooks\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Button,Grid} from \"@material-ui/core\";\r\n\r\n\r\n\r\nconst POLL = gql`\r\n    query Poll($id: String!) {\r\n        poll(id: $id) {\r\n            name\r\n            questions{\r\n                id\r\n                text\r\n                choice_a\r\n                choice_b\r\n                choice_c\r\n                choice_d\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst FILL_POLL = gql`\r\n    mutation fillPoll($id: String!,$choices:[Choices!]!) {\r\n        fillPoll(id: $id,choices:$choices)\r\n    }\r\n`;\r\n\r\n\r\nexport default function FillPage() {\r\n    const {id} = useParams();\r\n    const {loading, error, data} = useQuery(POLL, {\r\n        variables: {id},\r\n    });\r\n    const [addPoll] = useMutation(FILL_POLL);\r\n\r\n    const [choices, setChoices] = useState({});\r\n    // console.log(data);\r\n    // console.log(id);\r\n    // console.log(error);\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        const vals=Object.values(choices);\r\n        if (vals.length === data.poll.questions.length){\r\n            addPoll({\r\n                variables:{\r\n                    id,\r\n                    choices:vals,\r\n                }\r\n            }).then((res)=>console.log(res)).catch((e)=>console.log(e))\r\n        }\r\n        else\r\n            alert(\"please answer all questions\")\r\n    };\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Grid direction={\"column\"} container>\r\n            <Test style={{width:\"60%\", margin: \"50px auto\",}} onOptionSelect={selectedOptions => setChoices(selectedOptions)}>\r\n                {data.poll.questions.map((question,i)=>(\r\n                    <QuestionGroup key={question.id} questionNumber={i}>\r\n                        <Question>{question.text}</Question>\r\n                        <Option value=\"A\">{question.choice_a}</Option>\r\n                        <Option value=\"B\">{question.choice_b}</Option>\r\n                        <Option value=\"C\">{question.choice_c}</Option>\r\n                        <Option value=\"D\">{question.choice_d}</Option>\r\n                    </QuestionGroup>\r\n                ))}\r\n            </Test>\r\n            </Grid>\r\n            <Button color={'primary'} style={{width:\"300px\",marginTop:\"-30px\",marginBottom:\"200px\"}} type={\"submit\"}>submit</Button>\r\n\r\n        </form>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport {gql} from \"apollo-boost\";\r\nimport {useQuery, useSubscription} from \"@apollo/react-hooks\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Grid,Card,CardContent,Typography} from \"@material-ui/core\";\r\n// import BarChart from 'react-bar-chart';\r\n\r\nimport BarChart from 'react-bar-chart';\r\n\r\n\r\n\r\n\r\nconst POLL = gql`\r\n    query Poll($id: String!) {\r\n        poll(id: $id) {\r\n            name\r\n            questions{\r\n                id\r\n                text\r\n                choice_a\r\n                number_a\r\n                choice_b\r\n                number_b\r\n                choice_c\r\n                number_c\r\n                choice_d\r\n                number_d\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst POLL_UPDATE = gql`\r\n    subscription poll($id:String!) {\r\n        poll(id:$id){\r\n            questions{\r\n                number_a\r\n                number_b\r\n                number_c\r\n                number_d\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function PollPage() {\r\n    const {id}=useParams();\r\n    const [nums,setNums]=useState([]);\r\n    const {loading, error, data} = useQuery(POLL, {\r\n        variables: {id},\r\n        onCompleted:(data1 =>{\r\n            console.log(data1.poll.questions);\r\n            setNums(data1.poll.questions);\r\n            console.log(nums)\r\n        })\r\n    });\r\n    const sub = useSubscription(\r\n        POLL_UPDATE,\r\n        {\r\n            variables: { id},\r\n            onSubscriptionData: ({subscriptionData: {data: {poll}}}) => {\r\n                setNums(poll.questions);\r\n                console.log(nums)\r\n            }\r\n        }\r\n    );\r\n    // const dat = [\r\n    //     {text: 'Man', value: 500},\r\n    //     {text: 'Woman', value: 300}\r\n    // ];\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return <Grid container={true} style={{marginTop:\"30px\",marginBottom:\"50px\"}} alignContent={\"center\"} direction={\"column\"}>\r\n        {\r\n            data.poll.questions.map((question,i)=><Card style={{width:500,margin:\"20px\"}} key={question.id}>\r\n                <BarChart ylabel='تعداد'\r\n                          width={400}\r\n                          height={250}\r\n                          margin = {{top: 20, right: 20, bottom: 30, left: 40}}\r\n                          data={[\r\n                              {text:question.choice_a, value:nums[i]? nums[i].number_a : question.number_a},\r\n                              {text:question.choice_b, value:nums[i]? nums[i].number_b : question.number_b},\r\n                              {text:question.choice_c, value:nums[i]? nums[i].number_c : question.number_c},\r\n                              {text:question.choice_d, value:nums[i]? nums[i].number_d : question.number_d}\r\n                          ]}\r\n                          style={{color:\"blue\"}}\r\n                          />\r\n                <CardContent>\r\n                    <Typography>\r\n                        {question.text}\r\n                    </Typography>\r\n\r\n                </CardContent>\r\n\r\n\r\n            </Card>)\r\n        }\r\n    </Grid>;\r\n}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    Link\n} from \"react-router-dom\";\nimport HomePage from \"./HomePage/homePage\";\nimport AddPollPage from \"./AddPollPage/AddPollPage\";\nimport './App.css';\nimport FillPage from \"./FillPage/FillPage\";\nimport PollPage from \"./PollPage/PollPage\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {create} from 'jss';\nimport rtl from 'jss-rtl';\nimport {StylesProvider, jssPreset} from '@material-ui/core/styles';\n\n// Configure JSS\nconst jss = create({plugins: [...jssPreset().plugins, rtl()]});\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        // flexGrow: 1,\n        width: \"10vw\"\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <Router>\n            <div dir={\"rtl\"} className=\"App\" >\n                <StylesProvider jss={jss}>\n                    <AppBar position=\"static\" color={\"secondary\"}>\n                        <Toolbar className={classes.root}>\n                            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                                <MenuIcon/>\n                            </IconButton>\n                            <Button component={Link} to={'/home'} className={classes.title}>\n                                <Typography style={{color: \"white\"}} variant=\"h6\">\n                                    خانه\n                                </Typography>\n                            </Button>\n                            <Button component={Link} to={'/addpoll'} color=\"inherit\">برگذاری نظرسنجی</Button>\n                        </Toolbar>\n                    </AppBar>\n                    <Switch>\n                        <Route exact path={'/'} render={()=><Redirect to='/home'/>}/>\n                        <Route path={'/home'} component={HomePage}/>\n                        <Route path={'/addpoll'} component={AddPollPage}/>\n                        <Route path={'/fill/:id'} component={FillPage}/>\n                        <Route path={'/show/:id'} component={PollPage}/>\n                    </Switch>\n                </StylesProvider>\n            </div>\n        </Router>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n\n// Create an http link:\nconst httpLink = new HttpLink({\n    uri: 'https://blooming-hamlet-40237.herokuapp.com/'\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n    uri: `ws://blooming-hamlet-40237.herokuapp.com/graphql`,\n    options: {\n        reconnect: true\n    }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        );\n    },\n    wsLink,\n    httpLink,\n);\n\nconst client = new ApolloClient({\n    link,\n    cache: new InMemoryCache()\n});\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}><App /></ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}