{"version":3,"sources":["HomePage/homePage.jsx","AddPollPage/AddPollPage.jsx","FillPage/FillPage.jsx","PollPage/PollPage.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","margin","backgroundColor","palette","background","paper","listItem","createMuiTheme","direction","POLLS","gql","POLL_SUBSCRIPTION","HomePage","useQuery","loading","error","data","useState","newPolls","setNewPolls","classes","useSubscription","onSubscriptionData","pollAdded","subscriptionData","console","log","n","concat","LinearProgress","variant","Grid","ThemeProvider","List","component","className","aria-label","polls","map","poll","Fragment","key","id","ListItem","ListItemText","primary","name","ListItemSecondaryAction","Button","Link","to","Divider","light","Transition","React","forwardRef","props","ref","Slide","questions","menuButton","marginRight","spacing","closeButton","position","right","top","color","grey","title","ADD_POLL","h","useHistory","text","choice_a","choice_b","choice_c","choice_d","setQuestions","useMutation","addPoll","setName","handleChangeChoices","e","inf","target","split","index","parseInt","choice","newQuestions","value","open","setOpen","handleClose","dTitle","setDTitle","dMessage","setDMessage","onSubmit","preventDefault","variables","then","res","catch","message","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","style","minWidth","textAlign","IconButton","onClick","DialogContent","DialogContentText","DialogActions","display","justifyContent","push","height","container","justify","TextField","required","label","onChange","event","marginLeft","round","Typography","question","item","Card","CardContent","placeholder","marginBottom","handleChange","CardActions","sm","i","splice","handleDelete","type","marginTop","POLL","FILL_POLL","FillPage","useParams","choices","setChoices","vals","Object","values","length","alert","onOptionSelect","selectedOptions","questionNumber","POLL_UPDATE","PollPage","nums","setNums","onCompleted","data1","alignContent","ylabel","bottom","left","number_a","number_b","number_c","number_d","jss","create","plugins","jssPreset","rtl","flexGrow","App","basename","dir","StylesProvider","AppBar","Toolbar","edge","exact","path","render","AddPollPage","Boolean","window","location","hostname","match","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","timeout","reconnect","link","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfe85829.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useQuery, useSubscription} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport {Grid, Button, ListItemSecondaryAction, ThemeProvider, createMuiTheme, LinearProgress} from \"@material-ui/core\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 700,\r\n        margin: \"50px auto\",\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    listItem: {\r\n        margin: \"10px 3px\"\r\n    }\r\n}));\r\n\r\nconst theme = createMuiTheme({\r\n    direction: 'rtl',\r\n});\r\n\r\nconst POLLS = gql`\r\n    {\r\n\r\n        polls{\r\n            name\r\n            id\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nconst POLL_SUBSCRIPTION = gql`\r\n    subscription {\r\n        pollAdded {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function HomePage() {\r\n    const {loading, error, data} = useQuery(POLLS);\r\n    const [newPolls, setNewPolls] = useState([]);\r\n\r\n    const data2 = useSubscription(\r\n        POLL_SUBSCRIPTION,\r\n        {\r\n            onSubscriptionData: ({subscriptionData: {data: {pollAdded}}}) => {\r\n                console.log(pollAdded);\r\n                const n = [...newPolls].concat(pollAdded);\r\n                setNewPolls(n);\r\n            }\r\n        }\r\n    );\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    if (loading) return <LinearProgress variant=\"query\"/>\r\n    if (error) return <p>Error :(</p>;\r\n    return (\r\n        <Grid>\r\n            <ThemeProvider theme={theme}>\r\n\r\n                <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\r\n\r\n                    {\r\n                        data.polls.map((poll) => <React.Fragment key={poll.id}\r\n                        ><ListItem\r\n                            className={classes.listItem}>\r\n                            <ListItemText primary={poll.name}/>\r\n\r\n                            <ListItemSecondaryAction>\r\n                                <Button component={Link}\r\n                                        to={`/fill/${poll.id}`}>پر کردن نظرسنجی</Button>\r\n                                <Button component={Link}\r\n                                        to={`/show/${poll.id}`}>مشاهده نتایج</Button>\r\n                            </ListItemSecondaryAction>\r\n\r\n                        </ListItem>\r\n                            <Divider/>\r\n                        </React.Fragment>)\r\n                    }\r\n                    {\r\n                        newPolls.map((poll) => <React.Fragment key={poll.id}\r\n                        >\r\n                            <ListItem\r\n                                className={classes.listItem}\r\n                            >\r\n                                <ListItemText primary={poll.name}/>\r\n                                <ListItemSecondaryAction>\r\n                                    <Button component={Link}\r\n                                            to={`/fill/${poll.id}`}>پر کردن نظرسنجی</Button>\r\n                                    <Button component={Link}\r\n                                            to={`/show/${poll.id}`}>مشاهده نتایج</Button>\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                            <Divider/>\r\n                        </React.Fragment>)\r\n                    }\r\n\r\n                    <Divider light/>\r\n                </List>\r\n            </ThemeProvider>\r\n\r\n        </Grid>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {Card, Grid, Button, Typography, Dialog, ThemeProvider, createMuiTheme} from \"@material-ui/core\";\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"90vw\",\r\n        margin: \"0 auto\",\r\n\r\n    },\r\n    questions: {\r\n        width: \"80%\",\r\n        margin: \"0 auto\",\r\n\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    title: {\r\n        // flexGrow: 1,\r\n        width: \"10vw\"\r\n    },\r\n}));\r\n\r\nconst ADD_POLL = gql`\r\n    mutation addPoll($name: String!,$questions:[QuestionIn!]!) {\r\n        addPoll(name: $name,questions:$questions) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\nconst theme = createMuiTheme({\r\n    direction: 'rtl',\r\n});\r\n\r\nexport default function HomePage() {\r\n    const h = useHistory();\r\n    const classes = useStyles();\r\n    const [questions, setQuestions] = useState([{\r\n        text: \"\",\r\n        choice_a: \"\",\r\n        choice_b: \"\",\r\n        choice_c: \"\",\r\n        choice_d: \"\",\r\n    }]);\r\n    const [addPoll, dat] = useMutation(ADD_POLL);\r\n\r\n\r\n    const [name, setName] = useState([\"\"]);\r\n    const handleName = event => {\r\n        setName(event.target.value);\r\n    };\r\n\r\n\r\n    const addQuestion = (e) => {\r\n        setQuestions(questions.concat({\r\n            text: \"\",\r\n            choice_a: \"\",\r\n            choice_b: \"\",\r\n            choice_c: \"\",\r\n            choice_d: \"\",\r\n        }));\r\n        console.log(questions);\r\n    };\r\n    const handleChange = (e) => {\r\n        const index = parseInt(e.target.name);\r\n        let newQuestions = [...questions];\r\n\r\n        newQuestions[index].text = e.target.value;\r\n        setQuestions(newQuestions);\r\n    };\r\n    const handleChangeChoices = (e) => {\r\n        const inf = e.target.name.split('-');\r\n        const index = parseInt(inf[0]);\r\n        const choice = inf[1];\r\n        let newQuestions = [...questions];\r\n        newQuestions[index][choice] = e.target.value;\r\n        setQuestions(newQuestions);\r\n        console.log(questions);\r\n    };\r\n    const handleDelete = (i) => {\r\n        questions.splice(i, 1);\r\n        let newQuestions = [...questions];\r\n        setQuestions(newQuestions);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (name===''){\r\n            setDTitle(\"عدم تکمیل فرم\");\r\n            setDMessage(\"لطفا نام نظرسنجی را وارد کنید.\");\r\n        }\r\n        addPoll({\r\n            variables: {\r\n                name,\r\n                questions,\r\n            }\r\n        }).then((res) => {\r\n            setOpen(true);\r\n            setName(\"\");\r\n            setQuestions([]);\r\n        })\r\n            .catch((e)=>{\r\n                setDTitle(\"خطا\");\r\n                setDMessage(e.message);\r\n                setOpen(true)\r\n            })\r\n    };\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [dTitle, setDTitle] = useState(\"نظرسنجی با موفقیت ساخته شد\");\r\n    const [dMessage, setDMessage] = useState(\"\");\r\n\r\n\r\n    return (\r\n        <form className={classes.root} onSubmit={handleSubmit}>\r\n            <ThemeProvider theme={theme}>\r\n\r\n                <Dialog\r\n                    open={open}\r\n                    TransitionComponent={Transition}\r\n                    keepMounted\r\n                    onClose={handleClose}\r\n\r\n                >\r\n                    <DialogTitle style={{minWidth:\"270px\",textAlign: \"center\"}} id=\"alert-dialog-slide-title\">\r\n                        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={handleClose}>\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                        {dTitle}\r\n\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText\r\n                            style={{textAlign: \"right\"}}\r\n                            id=\"alert-dialog-slide-description\">\r\n                            {dMessage}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions style={{display: \"flex\", direction: \"row\", justifyContent: \"center\"}}>\r\n                        {/*<Button onClick={handleClose} color=\"primary\">*/}\r\n\r\n                        {/*    لغو*/}\r\n                        {/*</Button>*/}\r\n                        <Button onClick={()=>h.push('/home')} color=\"primary\">\r\n                            بازگشت به خانه\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </ThemeProvider>\r\n            <Grid style={{height: \"30px\", margin: \"20px\"}} container direction={\"row\"} justify={\"space-between\"}>\r\n                <TextField required={true} label={\"نام نظرسنجی\"} value={name} onChange={handleName}/>\r\n\r\n                <Button color=\"primary\" style={{backgroundColor: \"#0091EA\", color: \"white\", marginLeft: \"5%\"}}\r\n                        round color={\"info\"} onClick={(e) => addQuestion(e)}>\r\n                    <Typography>افزودن سوال</Typography>\r\n                </Button>\r\n            </Grid>\r\n            <Grid spacing={6} className={classes.questions} container direction={\"column\"}>\r\n                {\r\n                    questions.map((question, index) =>\r\n                        <Grid item className={classes.question} container direction={\"column\"} key={question.id}>\r\n                            <Card>\r\n                                <CardContent>\r\n\r\n                                    <TextField\r\n                                        required\r\n                                        placeholder=\"عنوان سوال\"\r\n                                        style={{width: \"100%\", marginBottom: \"20px\"}}\r\n                                        onChange={(e) => handleChange(e)}\r\n                                        name={`${index}`} value={`${question.text}`}\r\n                                    />\r\n\r\n\r\n                                    <TextField\r\n                                        required\r\n                                        placeholder=\"گزینه ۱\"\r\n                                        style={{width: \"67%\", marginBottom: \"10px\"}}\r\n                                        onChange={(e) => handleChangeChoices(e)}\r\n                                        name={`${index}-choice_a`} value={`${question.choice_a}`}\r\n                                    /><TextField\r\n                                    placeholder=\"گزینه ۲\"\r\n                                    required\r\n                                    style={{width: \"67%\", marginBottom: \"10px\"}}\r\n                                    onChange={(e) => handleChangeChoices(e)}\r\n                                    name={`${index}-choice_b`} value={`${question.choice_b}`}\r\n                                /><TextField\r\n                                    placeholder=\"گزینه ۳\"\r\n                                    required\r\n                                    style={{width: \"67%\", marginBottom: \"10px\"}}\r\n                                    onChange={(e) => handleChangeChoices(e)}\r\n                                    name={`${index}-choice_c`} value={`${question.choice_c}`}\r\n                                /><TextField\r\n                                    placeholder=\"گزینه ۴\"\r\n                                    required\r\n                                    style={{width: \"67%\", marginBottom: \"10px\"}}\r\n                                    onChange={(e) => handleChangeChoices(e)}\r\n                                    name={`${index}-choice_d`} value={`${question.choice_d}`}\r\n                                />\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button color={'secondary'} name={`${index}`} round sm\r\n                                            style={{}}\r\n                                            onClick={() => handleDelete(index)}\r\n                                    >حذف سوال</Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    )\r\n                }\r\n                <Button type={\"submit\"} style={{\r\n                    color: \"white\",\r\n                    backgroundColor: \"#0091EA\",\r\n                    marginTop: \"40px\",\r\n                    width: \"30%\",\r\n                    margin: \"0 auto\",\r\n\r\n                }}\r\n\r\n                >تایید</Button>\r\n            </Grid>\r\n        </form>\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Test, QuestionGroup, Question, Option} from 'react-multiple-choice';\r\nimport {gql} from \"apollo-boost\";\r\nimport {useMutation, useQuery} from \"@apollo/react-hooks\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Button, Grid, LinearProgress} from \"@material-ui/core\";\r\n\r\n\r\n\r\nconst POLL = gql`\r\n    query Poll($id: String!) {\r\n        poll(id: $id) {\r\n            name\r\n            questions{\r\n                id\r\n                text\r\n                choice_a\r\n                choice_b\r\n                choice_c\r\n                choice_d\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst FILL_POLL = gql`\r\n    mutation fillPoll($id: String!,$choices:[Choices!]!) {\r\n        fillPoll(id: $id,choices:$choices)\r\n    }\r\n`;\r\n\r\n\r\nexport default function FillPage() {\r\n    const {id} = useParams();\r\n    const {loading, error, data} = useQuery(POLL, {\r\n        variables: {id},\r\n    });\r\n    const [addPoll] = useMutation(FILL_POLL);\r\n\r\n    const [choices, setChoices] = useState({});\r\n    // console.log(data);\r\n    // console.log(id);\r\n    // console.log(error);\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        const vals=Object.values(choices);\r\n        if (vals.length === data.poll.questions.length){\r\n            addPoll({\r\n                variables:{\r\n                    id,\r\n                    choices:vals,\r\n                }\r\n            }).then((res)=>console.log(res)).catch((e)=>console.log(e))\r\n        }\r\n        else\r\n            alert(\"please answer all questions\")\r\n    };\r\n    if (loading) return <LinearProgress variant=\"query\" />\r\n\r\n    if (error) return <p>Error :(</p>;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Grid direction={\"column\"} container>\r\n            <Test style={{width:\"60%\", margin: \"50px auto\",}} onOptionSelect={selectedOptions => setChoices(selectedOptions)}>\r\n                {data.poll.questions.map((question,i)=>(\r\n                    <QuestionGroup key={question.id} questionNumber={i}>\r\n                        <Question>{question.text}</Question>\r\n                        <Option value=\"A\">{question.choice_a}</Option>\r\n                        <Option value=\"B\">{question.choice_b}</Option>\r\n                        <Option value=\"C\">{question.choice_c}</Option>\r\n                        <Option value=\"D\">{question.choice_d}</Option>\r\n                    </QuestionGroup>\r\n                ))}\r\n            </Test>\r\n            </Grid>\r\n            <Button color={'primary'} style={{width:\"300px\",marginTop:\"-30px\",marginBottom:\"200px\"}} type={\"submit\"}>submit</Button>\r\n\r\n        </form>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport {gql} from \"apollo-boost\";\r\nimport {useQuery, useSubscription} from \"@apollo/react-hooks\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Grid, Card, CardContent, Typography, LinearProgress} from \"@material-ui/core\";\r\n// import BarChart from 'react-bar-chart';\r\n\r\nimport BarChart from 'react-bar-chart';\r\n\r\n\r\n\r\n\r\nconst POLL = gql`\r\n    query Poll($id: String!) {\r\n        poll(id: $id) {\r\n            name\r\n            questions{\r\n                id\r\n                text\r\n                choice_a\r\n                number_a\r\n                choice_b\r\n                number_b\r\n                choice_c\r\n                number_c\r\n                choice_d\r\n                number_d\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst POLL_UPDATE = gql`\r\n    subscription poll($id:String!) {\r\n        poll(id:$id){\r\n            questions{\r\n                number_a\r\n                number_b\r\n                number_c\r\n                number_d\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function PollPage() {\r\n    const {id}=useParams();\r\n    const [nums,setNums]=useState([]);\r\n    const {loading, error, data} = useQuery(POLL, {\r\n        variables: {id},\r\n        onCompleted:(data1 =>{\r\n            console.log(data1.poll.questions);\r\n            setNums(data1.poll.questions);\r\n            console.log(nums)\r\n        })\r\n    });\r\n    const sub = useSubscription(\r\n        POLL_UPDATE,\r\n        {\r\n            variables: { id},\r\n            onSubscriptionData: ({subscriptionData: {data: {poll}}}) => {\r\n                setNums(poll.questions);\r\n                console.log(nums)\r\n            }\r\n        }\r\n    );\r\n    // const dat = [\r\n    //     {text: 'Man', value: 500},\r\n    //     {text: 'Woman', value: 300}\r\n    // ];\r\n    if (loading) return <LinearProgress variant=\"query\" />\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return <Grid container={true} style={{marginTop:\"30px\",marginBottom:\"50px\"}} alignContent={\"center\"} direction={\"column\"}>\r\n        {\r\n            data.poll.questions.map((question,i)=><Card style={{width:500,margin:\"20px\"}} key={question.id}>\r\n                <BarChart ylabel='تعداد'\r\n                          width={400}\r\n                          height={250}\r\n                          margin = {{top: 20, right: 20, bottom: 30, left: 40}}\r\n                          data={[\r\n                              {text:question.choice_a, value:nums[i]? nums[i].number_a : question.number_a},\r\n                              {text:question.choice_b, value:nums[i]? nums[i].number_b : question.number_b},\r\n                              {text:question.choice_c, value:nums[i]? nums[i].number_c : question.number_c},\r\n                              {text:question.choice_d, value:nums[i]? nums[i].number_d : question.number_d}\r\n                          ]}\r\n                          style={{color:\"blue\"}}\r\n                          />\r\n                <CardContent>\r\n                    <Typography>\r\n                        {question.text}\r\n                    </Typography>\r\n\r\n                </CardContent>\r\n\r\n\r\n            </Card>)\r\n        }\r\n    </Grid>;\r\n}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    Link,\n    HashRouter\n} from \"react-router-dom\";\nimport HomePage from \"./HomePage/homePage\";\nimport AddPollPage from \"./AddPollPage/AddPollPage\";\nimport './App.css';\nimport FillPage from \"./FillPage/FillPage\";\nimport PollPage from \"./PollPage/PollPage\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {create} from 'jss';\nimport rtl from 'jss-rtl';\nimport {StylesProvider, jssPreset} from '@material-ui/core/styles';\n\n// Configure JSS\nconst jss = create({plugins: [...jssPreset().plugins, rtl()]});\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        // flexGrow: 1,\n        width: \"10vw\"\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <Router>\n            <HashRouter basename='/'>\n            <div dir={\"rtl\"} className=\"App\" >\n                <StylesProvider jss={jss}>\n                    <AppBar position=\"static\" color={\"secondary\"}>\n                        <Toolbar className={classes.root}>\n                            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                                <MenuIcon/>\n                            </IconButton>\n                            <Button component={Link} to={'/home'} className={classes.title}>\n                                <Typography style={{color: \"white\"}} variant=\"h6\">\n                                    خانه\n                                </Typography>\n                            </Button>\n                            <Button component={Link} to={'/addpoll'} color=\"inherit\">برگزاری نظرسنجی</Button>\n                        </Toolbar>\n                    </AppBar>\n                    <Switch>\n                        <Route exact path={'/'} render={()=><Redirect to='/home'/>}/>\n                        <Route path={'/home'} component={HomePage}/>\n                        <Route path={'/addpoll'} component={AddPollPage}/>\n                        <Route path={'/fill/:id'} component={FillPage}/>\n                        <Route path={'/show/:id'} component={PollPage}/>\n                    </Switch>\n                </StylesProvider>\n            </div>\n            </HashRouter>\n        </Router>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n\n// Create an http link:\nconst httpLink = new HttpLink({\n    uri: 'https://blooming-hamlet-40237.herokuapp.com/'\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n    uri: 'wss://blooming-hamlet-40237.herokuapp.com/graphql',\n    options: {\n        timeout:30000,\n        reconnect: true\n    }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        );\n    },\n    wsLink,\n    httpLink,\n);\n\nconst client = new ApolloClient({\n    link,\n    cache: new InMemoryCache()\n});\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}><App /></ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}